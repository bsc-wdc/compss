#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retry_num=$7
  execution_envs=$8

  # Global variables
  exit_value=1

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  # Run application
  echo
  echo "*** RUNNING PYTHON APPLICATION TRACING USER EVENTS WITH HOOK"

  for python_interpreter in ${execution_envs}; do

    echo "   - Running with Interpreter: ${python_interpreter}"

    # APPLICATION 1
    app_name1="task_tracing_delayer_tracingHookEnabled.py"
    output_log1="${target_log_folder}/${app_name1}_${python_interpreter}_0${retry_num}.outputlog"
    error_log1="${target_log_folder}/${app_name1}_${python_interpreter}_0${retry_num}.errorlog"
    specific_log_dir1="${COMPSs_log_folder}/${app_name1}_${python_interpreter}_0${retry_num}"
    exec_target_log_folder1="${target_log_folder}/${app_name1}_${python_interpreter}_0${retry_num}"
    mkdir -p "${exec_target_log_folder1}"
    expectedTime=250s
    python_mpi_worker=""
    python_interpreter_real=${python_interpreter}
    if [ "$python_interpreter" == 'python2_mpi' ] || [ "$python_interpreter" == 'python3_mpi' ]; then
       echo "WARN: Test not requiered for ${python_interpreter}" | tee -a "${output_log}"
       continue
    fi
    # Add a little sleep to allow OS free sockets
    sleep 10s
    # shellcheck disable=SC2086
    timeout --signal=2 $expectedTime "${COMPSs_exec}" \
      --project="${base_app_dir}"/project.xml \
      --resources="${base_app_dir}"/resources.xml \
      \
      --comm="$comm" \
      \
      --debug \
      --tracing \
      ${runcompss_opts} \
      ${python_mpi_worker} \
      \
      --lang=python \
      --python_interpreter="${python_interpreter_real}" \
      --pythonpath="${base_app_dir}"/src \
      --specific_log_dir="${specific_log_dir1}" \
      \
      "${base_app_dir}/src/${app_name1}" > >(tee "${output_log1}") 2> >(tee "${error_log1}" >&2)

    # Check timeout
    if [[ "$?" = "124" ]]; then
      # Copy LOG files
      cp -rf "${specific_log_dir1}"/* "${exec_target_log_folder1}"

      # Report time out
      echo "[WARNING] Python Application timed out" >> "${output_log1}"
      exit_value=124
    else
      # Copy LOG files
      cp -rf "${specific_log_dir1}"/* "${exec_target_log_folder1}"

      # Retrieve elapsed time
      elapsed_th_enabled=$(head -n 1 "${exec_target_log_folder1}"/trace/*.prv | cut -d ":" -f 3 |  cut -d "_" -f 1)
    fi

    # APPLICATION 2
    app_name2="task_tracing_delayer_tracingHookDisabled.py"
    output_log2="${target_log_folder}/${app_name2}_${python_interpreter}_0${retry_num}.outputlog"
    error_log2="${target_log_folder}/${app_name2}_${python_interpreter}_0${retry_num}.errorlog"
    specific_log_dir2="${COMPSs_log_folder}/${app_name2}_${python_interpreter}_0${retry_num}"
    exec_target_log_folder2="${target_log_folder}/${app_name2}_${python_interpreter}_0${retry_num}"
    mkdir -p "${exec_target_log_folder2}"
    expectedTime=360s
    # Add a little sleep to allow OS free sockets
    sleep 10s
    # shellcheck disable=SC2086
    timeout --signal=2 $expectedTime "${COMPSs_exec}" \
      --project="${base_app_dir}"/project.xml \
      --resources="${base_app_dir}"/resources.xml \
      \
      --comm="$comm" \
      \
      --debug \
      --tracing \
      ${runcompss_opts} \
      ${python_mpi_worker} \
      \
      --lang=python \
      --python_interpreter="${python_interpreter_real}" \
      --pythonpath="${base_app_dir}"/src \
      --specific_log_dir="${specific_log_dir2}" \
      \
      "${base_app_dir}/src/${app_name2}" > >(tee "${output_log2}") 2> >(tee "${error_log2}" >&2)

    # Check timeout
    if [[ "$?" = "124" ]]; then
      # Copy LOG files
      cp -rf "${specific_log_dir2}"/* "${exec_target_log_folder2}"

      # Report time out
      echo "[WARNING] Python Application timed out" >> "${output_log2}"
      exit_value=124
    else
      # Copy LOG files
      cp -rf "${specific_log_dir2}"/* "${exec_target_log_folder2}"

      # Retrieve elapsed time
      elapsed_th_disabled=$(head -n 1 "${exec_target_log_folder2}"/trace/*.prv | cut -d ":" -f 3 |  cut -d "_" -f 1)
    fi

    # Compute test results
    margin="20000000000"  # 20 seconds in nanoseconds
    "${base_app_dir}"/result "${output_log1}" "${error_log1}" "${exec_target_log_folder1}" "${output_log2}" "${error_log2}" "${exec_target_log_folder2}" "${elapsed_th_enabled}" "${elapsed_th_disabled}" "${margin}"
    exit_value=$?
  done

  #----------------------------------------------------------------------------------
  # Return execution status
  exit ${exit_value}
