#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  
  TASKS=29
  
  # Checks reduce operations results	
  output1=$(cat "${output_file}" | grep "Result dependent Parms: 20" | wc -l)
  if [ "${output1}" -ne 1 ]; then
  	echo "ERROR: The result obtained in the dependent params operation is not correct. ${output1}" | tee -a "${output_file}"
  	exit 1
  fi
  
  output1=$(cat "${output_file}" | grep "Result non dependent Params: 15" | wc -l)
  if [ "${output1}" -ne 1 ]; then
  	echo "ERROR: The result obtained in the non dependent params operation is not correct. ${output1}" | tee -a "${output_file}"
  	exit 1
  fi
  
  output1=$(cat "${output_file}" | grep "Result mix of dependent and non dependent Params: 15" | wc -l)
  if [ "${output1}" -ne 1 ]; then
  	echo "ERROR: The result obtained in the mix of dependent and non dependent params operation is not correct. ${output1}" | tee -a "${output_file}"
  	exit 1
  fi
  
  output1=$(cat "${output_file}" | grep "Result Post-Barrier: 20" | wc -l)
  if [ "${output1}" -ne 1 ]; then
  	echo "ERROR: The result obtained in the post-barrier operation is not correct. ${output1}" | tee -a "${output_file}"
  	exit 1
  fi
  
  # Check if all intermediate reduce actions have been launched
  output1=$(cat "${runtime_log}" | grep "Creating partial reduce task" | wc -l)
  if [ "${output1}" -ne 13 ]; then
	  echo "ERROR: The number of launched intermediate reduce tasks is not correct. (obtained: ${output1} expected: 13)" | tee -a "${output_file}"
  	exit 1
  fi
  
  # Check if all final actions have been launched
  output1=$(cat "${runtime_log}" | grep "Creating final reduce task" | wc -l)
  if [ "${output1}" -ne 4 ]; then
	  echo "ERROR: The number of launched final reduce tasks is not correct. (obtained: ${output1} expected: 4)" | tee -a "${output_file}"
  	exit 1
  fi
  
  #----------------------------------------------------------------------------------
  
  exit 0
